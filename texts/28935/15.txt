<div><p>We are happy to announce the release of <strong>YUI 3.11.0</strong>! You can find it now on the <a href="http://yui.yahooapis.com/3.11.0/build/yui/yui-min.js">Yahoo! CDN</a>, via <a href="https://npmjs.org/package/yui">npm</a>, or <a href="http://yui.zenfs.com/releases/yui3/yui_3.11.0.zip">download it directly</a>. The <a href="http://yuilibrary.com/">YUI Library website</a> has also been updated to reflect the changes in this release.</p>
<p>There have been lots of changes across the board in this release , many of which are listed below.</p>
<h2>Performance Improvements Through Attribute and Base Changes</h2>
<p>Continuing the theme of performance improvements begun in <strong><a href="http://www.yuiblog.com/blog/2013/04/24/yui-3-10-0-released/">YUI 3.10.0</a></strong>, there have been more changes to Attribute and Base. The <a href="http://www.yuiblog.com/blog/2013/06/19/3-11pr1-released/">previous blog post</a> discussing this change can provide more details, but there have been more updates and fixes since <strong>3.11.0pr1</strong>, most significantly this pull request (<a href="https://github.com/yui/yui3/pull/917">#917</a>) which deals with an order of operations issue introduced with (<a href="https://github.com/yui/yui3/issues/629">#629</a>).</p>
<p>Essentially this has to do with creating new objects with Base() and BaseCore() and how ATTRS are handled. In this release Base now adds up all ATTRS up the class hierarchy at once instead of a class at a time which helps in instantiation times, and Base <code>init</code> and Attribute changes bypass the Event sub-system if there are no potential listeners (a speed and performance boost).</p>
<p>There is a new constructor flow ( as detailed in <a href="https://github.com/yui/yui3/pull/917">#917</a>), Flow &ldquo;3&Prime;:</p>
<p>Manual chained, B Constructor -&gt; A Constructor, kicks off:</p>
<ol><li>ExtA Constructor</li>
<li>ExtB Constructor</li>
<li>Ad-Hoc attrs</li>
<li>A + B ATTRS (valueFn, setters, getters, validators called)</li>
<li>A initializer</li>
<li>ExtA initializer</li>
<li>B initializer</li>
<li>ExtB initializer</li>
</ol><p>What this means to you is that you may run into backwards compatibility issues if you depended on:</p>
<ol><li>Existing B ATTRS relying on A initializer and ExtA initializer having run.</li>
<li>Existing ExtB Constructor relying on A ATTRS, A initializer, and Ext A initializer having run.</li>
</ol><p>There were some older extensions ( WidgetPositionAlign, WidgetButtons, etc.) that depended on the old behavior but after updating them to use <code>initializer</code> that cleared up the issues. So, if you have an older extension or otherwise depend on the old behavior of the constructor chain, you will need to update your code before migrating to this version.</p>
<h2>New Paginator and DataTable Paginator</h2>
<h3>Paginator</h3>
<p>We are pleased to announce a new component, <a href="http://yuilibrary.com/yui/docs/paginator/">Paginator</a>. It is released with a few examples and full test coverage. It&rsquo;s built to be lightweight and flexible and can be used on the server or client side. Since there are so many unique styles and use cases to paginators, the Paginator <strong>view</strong> has been stripped out and can be implemented in any fashion you like. Take a look at the <a href="http://yuilibrary.com/yui/docs/examples/#component-paginator">examples</a> to get a head start.</p>
<h3>DataTable Paginator</h3>
<p>Hot on the heels of Paginator is the much anticipated <a href="http://yuilibrary.com/yui/docs/api/classes/DataTable.Paginator.html">DataTable Paginator</a>. DataTable Paginator mixes directly into DataTable and is ready to go with a few settings defined as it has its own Model, View, and Templates. Everything is decoupled enough however to take in a new Model, View and/or Template and render something completely different.</p>
<h2>Other Updates</h2>
<p>This release also features a large number of fixes and updates across the board once again. The <a href="https://github.com/yui/yui3/wiki/YUI-3.11.0-Change-History-Rollup">change history rollup</a> contains a comprehensive list of all the noteworthy changes in this release.</p>
<h3>ArraySort Changes</h3>
<p><a href="https://github.com/rgrove">Ryan Grove</a> <a href="https://github.com/yui/yui3/commit/6db021a52411e60f92c45abdeecc532c5f44e782">added</a> a new method in <a href="http://yuilibrary.com/yui/docs/api/classes/ArraySort.html">ArraySort</a> for performing natural-order comparisons of two strings, two numbers, or a number and a string.</p>
<h3>Calendar Changes</h3>
<p>Several folks have contributed fixes to Calendar this time around. Jeroen Versteeg (<a href="https://github.com/drjayvee">@drjayvee</a>) has been working to clean up lang with removing unused components, <code>short_weekdays</code> strings, and replacing <code>weekday</code> strings with datatype/date-format. Arnaud Didry (<a href="https://github.com/ArnaudD">@ArnaudD</a>) added a fix that disables nodes correctly after setting <code>minimumDate</code> and <code>maximumDate</code>. And G&aacute;bor Kov&aacute;cs (<a href="https://github.com/gkovacs76">@gkovacs76</a>) added Hungarian language support to Calendar (as well as other components, see below) . Go YUI community!</p>
<h3>Color Changes</h3>
<p>Y.Color&rsquo;s <code>toArray()</code> method now always returns alpha values (<a href="http://yuilibrary.com/projects/yui3/ticket/2533111">ticket</a> | <a href="https://github.com/yui/yui3/pull/548">pull request</a>).</p>
<h3>DataTable Fixes</h3>
<p>There are a few DataTable bugs (<a href="https://github.com/yui/yui3/pull/695">#695</a>, <a href="https://github.com/yui/yui3/pull/703">#703</a>) that were addressed in this release. Let Tony (<a href="https://github.com/apipkin">@apipkin</a>) know what you think of the changes in DataTable as well as any plans you have to use Paginator.</p>
<h3>DOM Fixes</h3>
<p>Ezequiel Rodriguez (<a href="https://github.com/ziggyism">@ziggyism</a>) fixed an issue in <code>Y.Selector</code> where it could return an incorrect number of elements in browsers that don&rsquo;t support <code>getElementsByTagName()</code> or <code>querySelectorAll()</code>. Jeroen fixed an Opera related issue where <code>Y.Selector</code> failed to include selected <code>&lt;option&gt;</code> elements when the <code>:checked</code> pseduo-selector was used.</p>
<h3>ScrollInfo Changes</h3>
<p>Ryan also added an <code>isNodeOnscreen()</code> method in <a href="http://yuilibrary.com/yui/docs/api/classes/Plugin.ScrollInfo.html">ScrollInfo</a> that returns <code>true</code> if the given node is within the visible bounds of the viewport, <code>false</code> otherwise. He improved the performance of <code>getOffscreenNodes()</code> and <code>getOnscreenNodes()</code>. He also fixed a bug that caused <code>getOffscreenNodes()</code> and <code>getOnscreenNodes()</code> to return incorrect information when used on a scrollable node rather than the body.</p>
<h3>Tree Changes</h3>
<p>Ryan was on a roll with changes for this release:</p>
<ul><li>In <a href="http://yuilibrary.com/yui/docs/tree/">Y.Tree</a> the <code>Tree#createNode()</code>, <code>Tree#insertNode()</code>, and <code>Tree#traverseNode()</code> methods now throw or log informative error messages when given a destroyed node instead of failing cryptically (or succeeding when they shouldn&rsquo;t). </li>
<li>He added <code>Tree.Node#depth()</code>, which returns the depth of the node, starting at 0 for the root node. </li>
<li>Also added was <code>Tree.Sortable#sort()</code>, which sorts the children of every node in a sortable tree. </li>
<li>The <code>Tree.Node#isRoot()</code> method now returns <code>false</code> on destroyed nodes instead of causing an exception. </li>
<li>The <code>Tree.Sortable#sortNode()</code> and <code>Tree.Sortable.Node#sort()</code> methods now accept a <code>deep</code> option. If set to <code>true</code>, the entire hierarchy will be sorted (children, children&rsquo;s children, etc.). </li>
<li>In Tree.Sortable the Sort comparator functions are now executed in their original context. When the sort comparator lives on the tree, its <code>this</code> object will be the tree instance. When it lives on a node, its <code>this</code> object will be the node. When specified as an anonymous function in an options object, its <code>this</code> object will be the global object.</li>
</ul><h3>Changes In YUI Core</h3>
<p>YUI Core had quite a number of updates, all around making it faster and more compliant with modern browsers. Ezequiel Rodriguez improved the performance of <code>Y.Array.dedupe()</code> in ES5-compliant browsers as well as brought <code>Y.Lang.trim()</code>, <code>Y.Lang.trimLeft()</code>, <code>Y.Lang.trimRight()</code> into compliance with ES5 (plus tests to ensure native implementations are used only if they work properly). Ryan updated <code>Y.UA</code> to correctly identify IE 11 as well as Opera 15+.</p>
<h3>And More!</h3>
<p>There were fixes in <a href="http://yuilibrary.com/yui/docs/async-queue/">AsyncQueue</a>, <a href="http://yuilibrary.com/yui/docs/calendar/">Calendar</a> (thanks <a href="https://github.com/ArnaudD">Arnaud Didry</a>), <a href="http://yuilibrary.com/yui/docs/color/">Color</a>, <a href="http://yuilibrary.com/yui/docs/datatable/">DataTable</a>, updates to <a href="http://yuilibrary.com/yui/docs/handlebars/">Handlebars</a>, <a href="http://yuilibrary.com/yui/docs/io/">IO</a>, <a href="http://yuilibrary.com/yui/docs/jsonp/">JSONP</a>, <a href="http://yuilibrary.com/yui/docs/node/">Node</a>, Plugin, and <a href="http://yuilibrary.com/yui/docs/promise/">Promise</a>. Hungarian language support was added to <a href="http://yuilibrary.com/yui/docs/autocomplete/">AutoComplete</a>, <a href="http://yuilibrary.com/yui/docs/console/">Console</a>, and <a href="http://yuilibrary.com/yui/docs/api/classes/Date.html">Date</a> (thank you <a href="https://github.com/gkovacs76">G&aacute;bor Kov&aacute;cs</a>). Ryan also fixed a minor issue in the <a href="http://yuilibrary.com/yui/docs/editor/">Rich Text Editor</a> component. You can find a complete list of changes for this release on <a href="https://github.com/yui/yui3/compare/v3.10.3...v3.11.0">GitHub</a> as well as the <a href="https://github.com/yui/yui3/wiki/YUI-3.11.0-Change-History-Rollup">change history rollup</a>. We had a total of 570 commits by 18 authors since <strong>YUI 3.10.3</strong>.</p>
<h3>Known Issues</h3>
<p>Our testing efforts have been constantly expanding. As a result we are discovering issues that may have existed in previous versions but we are now better able to discover them.</p>
<ul><li>One such <a href="https://github.com/yui/yui3/issues/1000">issue</a> is with <code>Widget.StdMod</code> in IE6. Jeroen also fixed an issue where <code>fillHeight</code> didn&rsquo;t work correctly when a section&rsquo;s content was set after rendering. Fixing this exposed an issue in IE6 with <code>contentBox</code> where the height gets incorrectly set after the <code>bodyContentChange</code> event is fired. If you have code that depends on <code>Widget.StdMod</code> in IE6, take note of this issue. </li>
<li>Another <a href="https://github.com/yui/yui3/issues/890">issue</a> is around DataTable Paginator in IE8 &ndash; a unit test is failing and Tony is investigating this issue.</li>
</ul><p>We run over 10K tests for every environment, which now includes around 1700 functional tests! And over the course of a single day this adds up to a minimum of over 120K tests run across our <a href="http://yuilibrary.com/yui/environments/">Target Environments</a>. We believe having a strong CI is critical for maintaining the high standard of quality for our codebase. If you run into any issues with this release, please file an <a href="https://github.com/yui/yui3/issues/new">issue</a>.</p></div>
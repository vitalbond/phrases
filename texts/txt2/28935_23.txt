<div><p><a href="http://www.flickr.com/photos/ashusta/9326217062/" title="Evening Sing-along by &Icirc;&plusmn;lexander, on Flickr"><img src="http://farm8.staticflickr.com/7427/9326217062_2561c90c0b_z.jpg" width="640" height="143" alt="Evening Sing-along"></a></p>
<p>This year&rsquo;s NodeConf was a mix of previous NodeConfs (that were run like most conferences) and the annual NodeConf Summer Camps (that were run like, well, a summer camp). The format differed from most conferences by providing outdoor activities like dodgeball, lake swimming, and campfires with sing-alongs. It emphasized small group sizes for talks and providing only one technical path. Despite some initial concern that summer camp themed activities would impinge upon time available for learning and hacking, by the end of the weekend I was very happy with the format.</p>
<p>Most conferences ask presenters to put together and present their content to a single audience that may consist of many hundreds of attendees. NodeConf flipped that around to asking presenters to repeatedly present to many smaller groups. This allowed attendees time to ask for clarification or even for some one-on-one help without worrying about the impact that they might have on (literally) hundreds of other people. I assume that getting presenters who were willing to spend 10 times as much time talking as they would at another conference was a challenge, but <a href="https://twitter.com/mikeal">Mikeal</a> came through and organized a bang-up group of presenters who really know Node.js and who care about building the community around the product.</p>
<p>So, what was the process like? We arrived at <a href="http://y.ahoo.it/wQulq1/a">Walker Creek Ranch in North Marin</a> on Thursday, and each person was assigned a schedule of sessions to attend. Because there was only one technical track every developer attended every session, but the order of attendance was randomized so that people would have more opportunity to meet other attendees than might have occurred if they attended the sessions with a static cohort. After schedule pickup we were left to socialize and explore the facilities until the welcome campfire / sing-along started. The actual sessions started on Friday morning and were 55 minutes in length with approximately 30 campers per session.</p>
<p>Of course there was <a href="http://en.wikipedia.org/wiki/Four_square">Foursquare</a>:</p>
<p><a href="http://www.flickr.com/photos/ashusta/9321244309/" title="Foursquare at NodeConf by &Icirc;&plusmn;lexander, on Flickr"><img src="http://farm4.staticflickr.com/3717/9321244309_b81df976eb_z.jpg" width="640" height="361" alt="Foursquare at NodeConf"></a></p>
<p><a id="schedule"></a></p>
<h2>Schedule</h2>
<ul><li><strong>Thursday</strong> &ndash; arrive, setup camp, get schedule and meet other attendees </li>
<li><strong>Friday</strong> &ndash; sessions 1 through 6, campfire and sing-along </li>
<li><strong>Saturday</strong> &ndash; sessions 7 and 8, presenter &lsquo;office hours&rsquo;, hacks, campfire and sing-along </li>
<li><strong>Sunday</strong> &ndash; finish up hacks and depart</li>
</ul><p><a id="presentationsummaries"></a></p>
<h2>Presentation Summaries</h2>
<p><a id="hardware"></a></p>
<h3>Hardware</h3>
<p>Node.js is mostly used for serving web pages, but it is designed as a general computing platform. The Hardware presentation was based around using Node.js with the <a href="https://github.com/rwldrn/johnny-five">Johnny Five package</a> to control an Arduino development board to demonstrate Node.js interacting with the physical world. Presenters Raquel Velez, Elijah Insua, and Rick Waldron stepped developers through setting up Arduino and writing a simple application for communication between the hardware and a Node.js instance with plenty of time for hands-on help and hacking.</p>
<p>The presentation slides are available at <a href="https://speakerdeck.com/rockbot/nodeconf-nodebots-session">https://speakerdeck.com/rockbot/nodeconf-nodebots-session</a>.</p>
<p><a id="streammodules"></a></p>
<h3>Stream Modules</h3>
<p>Streams are &ldquo;a dependable way to compose large systems out of small components that do one thing well.&rdquo; They&rsquo;re essentially Unix pipes writ large allowing output from one program to be programmatically used as input to another program. Presenters Max Ogden, Substack, and Matt Podwysocki gave an overview of how streams are used in Node.js and then helped attendees work through the <a href="https://github.com/substack/stream-adventure">Stream Adventure</a> game / programming challenge. Substack also wrote a Stream Handbook, available at <a href="https://github.com/substack/stream-handbook">https://github.com/substack/stream-handbook</a>.</p>
<p><a id="webservices"></a></p>
<h3>Web Services</h3>
<p>This was an overview session of web-service stacks on Node.js. Presenters Eran Hammer and Mike Cantelon covered a lot of material relating to <a href="http://spumko.github.io/">Hapi</a> and <a href="http://expressjs.com/">Express</a>. The general pattern for handling and responding to HTTP requests on Node.js has solidified around the following steps:</p>
<ol><li><strong>routing</strong> &ndash; figure out what resources the request is trying to load </li>
<li><strong>middleware</strong> &ndash; apply application-specific rules based on the route </li>
<li><strong>authentication</strong> &ndash; does the user actually have permission for that resource </li>
<li><strong>reply</strong> &ndash; send the HTTP response out to the user</li>
</ol><p>A maintainable web service will use this pattern to efficiently marshall and transmit resources to users. A full web site will make use of a framework (like Walmart Labs&rsquo; Hapi or Yahoo!&rsquo;s <a href="http://developer.yahoo.com/cocktails/mojito/">Mojito</a>) that extends the pattern to support MVC-like functionality for your content.</p>
<p><a id="nodecopter"></a></p>
<h3>NodeCopter</h3>
<p>Parrot AR drones, controlled by Node.js! Nexxy provided us with a cheat-sheet of the commands provided by the <a href="https://github.com/felixge/node-ar-drone"><code>node-ar-drone</code></a> package, instructions for connecting to the drone, 1 drone for every 2 developers, a few words of encouragement to get started and copious quantities of LiPo batteries while we worked.</p>
<p>Using a <a href="http://en.wikipedia.org/wiki/REPL">REPL</a> you can interactively control the drone and verify how each command will be executed. Once you&rsquo;re confident in how the drone will react you can execute Node.js programs normally to send the drone on missions. It was a great example of how the Node.js REPL can be used to dynamically create programs. I was personally too nervous about losing the drone to allow for autonomous execution of my code but if the earlier Hardware session hadn&rsquo;t convinced me that Node.js is useful as a general computation platform this one did.</p>
<p><a id="debugging"></a></p>
<h3>Debugging &amp; Performance Analysis with DTrace</h3>
<p>Debugging Node.js performance issues can be tricky due to the asynchronous nature of the platform and the fact that things are evolving very quickly. <a href="http://en.wikipedia.org/wiki/DTrace">DTrace</a> is a tool that allows you to capture events and state from your code as it is executed in production. Presenter, Max Bruning from Joyent walked us through a series of labs that showed how to instrument code, all the way down to the kernel, for debugging of live systems.</p>
<p>What&rsquo;s really impressive about DTrace (well, a lot, but let&rsquo;s say what was most impressive to me) is that you use instrumented code with nearly zero overhead so that it is possible to pull live data off of production hosts with all of the travails that they encounter. If your hosts are experiencing outages due to DDOS or configuration issues that cause a tight loop of execution, this is the best way to get access to information that might otherwise be lost as log files overflow.</p>
<p><a id="howtonode"></a></p>
<h3>How to Node Core</h3>
<p><a href="https://github.com/joyent/node">Node core</a> is the name given to a group of classes that constitute the heart of the Node.js application. Isaac Z. Schlueter, the primary maintainer of node core and <a href="https://npmjs.org/">NPM</a> presented an overview of what it takes to contribute code to this foundational layer of the Node.js stack. Isaac was at pains to show that, with care, most developers can contribute code that will be accepted and merged. His definition of who should contribute to node core is &ldquo;rockstars and users&rdquo;. Which is to say, everyone who has a stake in the performance and stability of Node.js is encouraged to help make it better.</p>
<p>Key take-aways from the session:</p>
<ol><li>tests are absolutely required</li>
<li>test names should be descriptive</li>
<li>test return values must fit the existing pattern of returning &lsquo;ok&rsquo; for success</li>
<li>tests must run in under 100MS</li>
<li>contributing changes to node core is not difficult, but it does require attention to detail</li>
</ol><p>Isaac&rsquo;s slides are available at <a href="http://www.slideshare.net/IsaacSchlueter/how-tonodecore?ref=http://blog.izs.me/post/54766250297/nodeconf-2013">http://www.slideshare.net/IsaacSchlueter/how-tonodecore?ref=http://blog.izs.me/post/54766250297/nodeconf-2013</a></p>
<p><a id="nodejs"></a></p>
<h3>Node.js Domains</h3>
<p>Try/catch is slow and doesn&rsquo;t work with asynchronous callbacks. By wrapping Node.js code in a domain you can deal with exceptions that occur during callbacks. These work very much like closures in JS where a developer can control the visibility of their code and handle any internal errors that occur by wrapping the code into a self-contained module / function. Presenters Forrest Norvell and Domenic Denicola explained how to use domains to successfully handle (or at least get meaningful logs from) errors in asynchronous code.</p>
<p>Slides are available at <a href="http://othiym23.github.io/nodeconf2013-domains/#/">http://othiym23.github.io/nodeconf2013-domains/#/</a>. Anyone who wants to maintain maximum service availability should really understand how domains are used.</p>
<p><a id="distributed"></a></p>
<h3>Distributed Apps</h3>
<p>Running a distributed application on node is surprisingly easy. Because everything is already set up for asynchronous callbacks it doesn&rsquo;t really matter where code is executed, so long as its output can be routed to the correct place. Presenters Dominic Tarr and Jake Verbaten walked attendees through the creation of a chat client/server application where each user provided both a client and a server. This was a very hands-on session with developers working heads-down to get their systems hooked into the network and chatting away.</p>
<p><a id="conclusions"></a></p>
<h2>Conclusions</h2>
<p>Camping and code don&rsquo;t seem like they&rsquo;d go together, but in this case they did. Having a steady supply of electricity and a (slowish) Internet connection meant that everyone was able work throughout the weekend without suffering the attention drain that unfettered access to the &lsquo;net can induce. Making Node.js accessible to senior and junior developers, with presenters who could talk about any level of the stack, is what really made the conference for me. The sing-alongs and s&rsquo;mores were a nice add-on, but not really necessary with such a strong lineup of sessions and such a beautiful venue.</p>
<p><a href="http://www.flickr.com/photos/ashusta/9324036548/" title="Morning View from the Tent by Alexander, on Flickr"><img src="http://farm3.staticflickr.com/2840/9324036548_391f2cd41f_z.jpg" width="640" height="361" alt="Morning View from the Tent"></a></p></div>
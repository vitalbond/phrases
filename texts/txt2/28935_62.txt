<div><p>When I first started on DataTable Paginator, the idea for a standalone paginator component came up. This component needed to be small, light weight and versatile. With this in mind, I put my head down and came up with a few different concepts.</p>
<h3 id="dtpaginatorwidget">Paginator Widget</h3>
<p>The first build of <a href="http://yuilibrary.com/yui/docs/paginator/">Paginator</a> was a <a href="http://yuilibrary.com/yui/docs/widget/">Widget</a> with paging capabilities. This widget was self contained and rendered a predefined UI with &ldquo;First&rdquo;, &ldquo;Previous&rdquo;, &ldquo;Next&rdquo; and &ldquo;Last&rdquo; buttons with a series of numbers in the middle. It was a &ldquo;standard&rdquo; paginator control, but then some other feedback started coming in asking about how to disable buttons and about handling really large sets of data. It became obvious very quickly having a single module to house such a tool was not hitting the versatile marker I set to achieve. It was apparent I needed a new approach.</p>
<h3 id="dtpaginatormodelview">Paginator Model View</h3>
<p>The next logical step was to abstract the logic from the view. To achieve the separation, I used <a href="http://yuilibrary.com/yui/docs/model/">Model</a> and <a href="http://yuilibrary.com/yui/docs/view/">View</a>. I also took it a step further to move the URL logic to it&rsquo;s own file. This meant that you could have pagination in your application without having to fight or work around URLs in your controls, but you could easily get them if you wanted them. This decision was easy, the challenge of the layout still remained. I invoked the help of <a href="http://yuilibrary.com/yui/docs/template/">Template</a> to create a few templates out of the box.</p>
<p>The templates became more and more bloated with each customization option you added to them. And since <a href="http://yuilibrary.com/yui/docs/paginator/">Paginator</a> required a lot of customization, this started breaking the small and lightweight goal I had established. I thought about scrapping some of the template customization and let the implementers add that on if they wanted it, but I felt that could be very limiting in the end. Again, I needed another solution.</p>
<h3 id="dtpaginatormixable">Paginator Mixable</h3>
<p>The obvious solution to the size issue was to drop the view logic altogether. I needed to make a change to the files we were keeping. I didn&rsquo;t need the core and URL modules to extend <a href="http://yuilibrary.com/yui/docs/model/">Model</a> any longer, so that was out. This left me with two files that could be mixed into anything, but nothing that could be instantiated when you wanted it out of the box. This meant we needed to create one more file for Paginator, one that mixed into <a href="http://yuilibrary.com/yui/docs/base/">Base</a> so it could be instantiated and get change events. Removing the view logic wasn&rsquo;t without some resistance but it quickly proved it&rsquo;s worth when creating the user guides.</p>
<h2 id="dtdatatablepaginator">DataTable Paginator</h2>
<p>I was finally at a satisfactory place with <a href="http://yuilibrary.com/yui/docs/paginator/">Paginator</a>, and it was finally time to get started on the DataTable specific Paginator. This Paginator implementation needed a specific UI and needed to mix into the <a href="http://yuilibrary.com/yui/docs/datatable/">DataTable</a> nicely. This meant it needed to provide a customizable View, Model, Template and a Controller to mix into DataTable without sacrificing any of the customizations.</p>
<h3 id="dtmodel">Model</h3>
<p>To start, I created a Paginator Model. This was the easiest part. You just need to mix <code>paginator-core</code> into a Model. <code>Y.Base.create('dt-pg-model', Y.Model, [Y.Paginator.Core]);</code></p>
<h3 id="templates">Templates</h3>
<p>The Paginator needed a few templates to make the customization of the the UI a bit easier on the developer if they wanted to change it. There are a few different templates that come pre assembled.</p>
<ul><li><em>rowWrapper</em> &ndash; Creates a TR around the Paginator for use in a table node</li>
<li><em>button</em> &ndash; Creates a button with the given type and label</li>
<li><em>buttons</em> &ndash; Creates a group of buttons and each button is created from the array of buttons passed in</li>
<li><em>gotoPage</em> &ndash; The form containing the input UI for the end user to type in the page they wish to view</li>
<li><em>perPage</em> &ndash; A select node containing different options to view a different set of items per page</li>
</ul><p>Each of these are able to be changed by the developer in <code>Y.DataTable.Templates.Paginator</code>.</p>
<h3 id="view">View</h3>
<p>The View uses various options to put the UI together. One very important piece is the <code>contentTemplate</code>. This dictates the content and the order of the UI components. Originally it&rsquo;s defined as <code>'{buttons}{goto}{perPage}'</code> and will be replaced with the UI components in that order. You can change the order, add and remove options &mdash; although in doing such, you may need to adjust other parts and the CSS, but it is an option!</p>
<h3 id="dtcontroller">Controller</h3>
<p>The controller is where the Model and View are tied together and the part of the puzzle that get&rsquo;s mixed into the <a href="http://yuilibrary.com/yui/docs/datatable/">DataTable</a>. There are lots of thing to talk about in this one, but I&rsquo;ll just touch on a few of them.</p>
<p>The first is providing your own Paginator Model and View to the DataTable. When you instantiate the DataTable, you can pass through a new <code>paginatorModel</code> and/or <code>paginatorView</code> to the configuration. These are defined as the files shipped with DataTable Paginator by default. Feel free to mix and match as you wish.</p>
<p>You can also specify locations for the paginator to reside in the application. By default it&rsquo;s set to render the paginator in the footer. You can render it into the header, just before the header cells. You can also render it into any node on the page and still get the same benefit with interaction.</p>
<p>There are also a few public methods to note: <a href="http://yuilibrary.com/yui/docs/api/classes/DataTable.Paginator.html#method_firstPage"><code>firstPage</code></a>, <a href="http://yuilibrary.com/yui/docs/api/classes/DataTable.Paginator.html#method_previousPage"><code>prevPage</code></a>, <a href="http://yuilibrary.com/yui/docs/api/classes/DataTable.Paginator.html#method_nextPage"><code>nextPage</code></a>, <a href="http://yuilibrary.com/yui/docs/api/classes/DataTable.Paginator.html#method_lastPage"><code>lastPage</code></a>. These will pass through to the paginator model and set the page number as expected. For other interaction with the paginator model, you need only call it from the DataTable set such as <code>myDt.get('paginatorModel').set('page', 4);</code></p>
<h2 id="movingforward">Moving Forward</h2>
<p>There are lots of other neat things coming to <a href="http://yuilibrary.com/yui/docs/datatable/">DataTable</a> in the near future and I am very excited to be a part of this project. If you have any feedback on the component as it stands now, feel free to let me know by posting comments to our <a href="https://trello.com/b/fTpWY4oN/datatable-roadmap">Trello Board</a> or a message to the <a href="https://groups.google.com/forum/#!categories/yui-support/datatable">Google Groups</a> set aside for DataTable. If you have a feature request or want to contribute a pull request to get something fixed or added, be sure to head over to the project page on <a href="https://github.com/yui/yui3/">GitHub</a> and make the request.</p></div>